{"version":3,"sources":["color.js","App.js","index.js"],"names":["theme","styles","StyleSheet","create","container","flex","backgroundColor","paddingHorizontal","header","flexDirection","marginTop","justifyContent","btnText","input","marginVertical","paddingVertical","borderRadius","toDo","marginBottom","alignItems","toDoText","color","fontSize","fontWeight","registerRootComponent","useState","working","setWorking","text","setText","toDos","setToDos","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","useEffect","getItem","s","parse","loadToDos","View","style","StatusBar","TouchableOpacity","onPress","Text","TextInput","placeholder","onChangeText","payload","onSubmitEditing","newToDos","Date","now","value","ScrollView","Object","keys","map","res","Platform","OS","confirm","Alert","alert","deleteToDo","Fontisto","name","size"],"mappings":"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","file":"static/js/app.674a63a2.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  grey: \"#3a3d40\",\n  toDoBg: \"#5c5c60\"\n};\n\n","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View, TouchableOpacity, TextInput, ScrollView, Alert, Platform } from 'react-native';\nimport { useState, useEffect } from 'react';\nimport { theme } from './color';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Fontisto } from '@expo/vector-icons';\nimport 'expo-dev-client';\n\nconst STORAGE_KEY = \"@toDos\"\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({})\n  const travel = () => setWorking(false);\n  const work =   () => setWorking(true);\n  const onChangeText = (payload)=> setText(payload);\n\n  const addToDo = async () => {\n\n    if(text === \"\"){\n      return\n    }\n    const newToDos = Object.assign({}, toDos, { [Date.now()] : {text:text, working:working}, } )\n    // 아래 코드가 왜 위에 코드랑 같은지 바로 이해가 안될 수 있는데 이거 A = A +1 과 같은 로직의 코드임.\n    // 다만 A와 똑같지는 않고 A`정도로 이해하면 되겠다. (리액트에서는 state를 직접 수정하는걸 금하기 때문에 setState를 수정하거나)\n    // ...문법을 써서 A의 복제본인 A`을 만들어서 써야한다.\n    // const newToDos = {\n    //   ...toDos, \n    //   [Date.now()] : {text: text, working: working},\n    // }\n\n    setToDos(newToDos);\n    await saveToDos(newToDos)\n    setText(\"\");\n    // console.log(toDos[1652104358532]);\n    // console.log(Object.keys(toDos)[0]);\n  }\n\n  const saveToDos = async(toSave) => {\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave))\n  }\n  const loadToDos = async()=>{\n    const s = await AsyncStorage.getItem(STORAGE_KEY)\n    // console.log(s, JSON.parse(s))\n    if(s){\n      setToDos(JSON.parse(s))\n    }\n  }\n  useEffect(()=>{\n    loadToDos();\n  }, []);\n\n  const deleteToDo = async(res)=>{\n    if(Platform.OS === \"web\"){\n      const ok = confirm(\"Do you want delete? (In Web)\")\n      if(ok){\n        const newToDos = {...toDos}\n        delete newToDos[res]\n        setToDos(newToDos);\n        saveToDos(newToDos)\n      }\n    }\n    Alert.alert(\n      \"Delete To Do\",\n      \"Are you sure?\", \n      [\n        {text: \"Cancel\"},\n        {text: \"I'm sure\", onPress: ()=>{\n          const newToDos = {...toDos}\n          delete newToDos[res]\n          // console.log(newToDos)\n          setToDos(newToDos);\n          saveToDos(newToDos)\n        } }        \n      ]\n    );\n  }  \n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text style={{fontSize: 33, fontWeight: \"600\", color: working ? \"white\" : theme.grey }}>Work</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity onPress={travel}>\n          <Text style={{fontSize: 33, fontWeight: \"600\", color: !working ? \"white\" : theme.grey }}>Travel</Text>\n        </TouchableOpacity>\n      </View>\n        <TextInput\n          placeholder={working? \"Add a To do\" : \"Where do you want to Go?\"}\n          style={styles.input}\n          onChangeText={onChangeText}\n          onSubmitEditing={addToDo}\n          value={text}\n        />\n        <ScrollView>\n          {Object.keys(toDos).map((res)=>(\n            toDos[res].working === working?\n            <View key={res} style={styles.toDo}>\n              <Text style={styles.toDoText}>{toDos[res].text}</Text>\n              <TouchableOpacity onPress={()=> deleteToDo(res)}>\n                <Fontisto name=\"trash\" size={20} color=\"white\" />\n              </TouchableOpacity>\n            </View> : null\n          ))}\n        </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n     \n  },\n  header:{\n    flexDirection:\"row\",\n    marginTop: 100,\n    justifyContent: \"space-between\"\n  },\n  btnText:{\n    \n  },\n  input:{\n    backgroundColor:\"white\",\n    marginVertical: 10,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 100,\n  },\n  toDo:{\n    backgroundColor:theme.toDoBg,\n    marginBottom: 10,\n    paddingVertical: 10,\n    paddingHorizontal: 20,\n    borderRadius: 10,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  toDoText:{\n    color:\"white\",\n    fontSize: 16,\n    fontWeight: \"500\"\n  }\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}